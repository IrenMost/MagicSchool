// <auto-generated />
using System;
using BackendMagic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendMagic.Migrations
{
    [DbContext(typeof(SchoolContext))]
    partial class SchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendMagic.Model.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"));

                    b.Property<string>("ChooseableCourses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeType")
                        .HasColumnType("int");

                    b.HasKey("GradeId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("BackendMagic.Model.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseId"));

                    b.Property<int>("HouseName")
                        .HasColumnType("int");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("HouseId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("BackendMagic.Model.HouseElf", b =>
                {
                    b.Property<int>("HouseElfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseElfId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("HouseElfId");

                    b.HasIndex("SchoolId");

                    b.ToTable("HousesElves");
                });

            modelBuilder.Entity("BackendMagic.Model.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("HouseId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("BackendMagic.Model.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("BackendMagic.Model.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyCourses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pet")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("GradeId");

                    b.HasIndex("HouseId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("BackendMagic.Model.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<int>("CurrentCourse")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("BackendMagic.Model.TeacherGrade", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("TeacherGrade");
                });

            modelBuilder.Entity("BackendMagic.Model.House", b =>
                {
                    b.HasOne("BackendMagic.Model.School", null)
                        .WithMany("Houses")
                        .HasForeignKey("SchoolId");

                    b.HasOne("BackendMagic.Model.Teacher", "HeadMaster")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HeadMaster");
                });

            modelBuilder.Entity("BackendMagic.Model.HouseElf", b =>
                {
                    b.HasOne("BackendMagic.Model.School", null)
                        .WithMany("HouseElves")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("BackendMagic.Model.Room", b =>
                {
                    b.HasOne("BackendMagic.Model.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendMagic.Model.School", null)
                        .WithMany("Rooms")
                        .HasForeignKey("SchoolId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("BackendMagic.Model.Student", b =>
                {
                    b.HasOne("BackendMagic.Model.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendMagic.Model.House", "House")
                        .WithMany("Students")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendMagic.Model.Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendMagic.Model.School", null)
                        .WithMany("Students")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Grade");

                    b.Navigation("House");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BackendMagic.Model.Teacher", b =>
                {
                    b.HasOne("BackendMagic.Model.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("BackendMagic.Model.TeacherGrade", b =>
                {
                    b.HasOne("BackendMagic.Model.Grade", "Grade")
                        .WithMany("TeacherGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendMagic.Model.Teacher", "Teacher")
                        .WithMany("TeacherGrades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BackendMagic.Model.Grade", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeacherGrades");
                });

            modelBuilder.Entity("BackendMagic.Model.House", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("BackendMagic.Model.Room", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("BackendMagic.Model.School", b =>
                {
                    b.Navigation("HouseElves");

                    b.Navigation("Houses");

                    b.Navigation("Rooms");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("BackendMagic.Model.Teacher", b =>
                {
                    b.Navigation("TeacherGrades");
                });
#pragma warning restore 612, 618
        }
    }
}
